// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_2")  // Use your Supabase URL
}

model City {
  id       String  @id @default(uuid())  // Use UUID instead of ObjectId
  name     String  @unique
  distance Int

  // Relations
  cops      Cop[]
  fugitives Fugitive[]
}

model Vehicle {
  id    String @id @default(uuid())
  type  String
  range Int
  count Int

  // Relations
  cops Cop[]
}

model Cop {
  id            String @id @default(uuid())
  name          String
  cityId        String
  vehicleId     String
  gameSessionId String

  // Relations
  city        City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  vehicle     Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  gameSession GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
}

model Fugitive {
  id            String @id @default(uuid())
  cityId        String
  gameSessionId String

  // Relations
  city        City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  gameSession GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
}

model GameSession {
  id             String   @id @default(uuid())
  fugitiveCityId String
  createdAt      DateTime @default(now())

  // Relations
  fugitives Fugitive[]
  cops      Cop[]
}